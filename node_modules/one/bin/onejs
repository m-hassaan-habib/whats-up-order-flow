#!/usr/bin/env node


var one = require('../lib'),
    puts = require('util').puts,
    buildOptions = {};

var REV = '1.1.0';

var opt = require('optimist'),
    argv = opt
    .options('debug', {})
    .options('tie', {})
    .options('noprocess', {})
    .options('quiet', {})
    .options('verbose', {})
    .options('version', {})
    .options('plain', {})
    .options('help', {})
    .argv;

var HELP = ['usage: onejs [action] [manifest] [options]'
          , ''
          , 'Transforms NodeJS packages into single, stand-alone JavaScript files that can be run at other platforms. See the documentation at http://github.com/azer/onejs for more information.'
          , ''
          , 'actions:'
          , '  build      <manifest> <target>          Generate a stand-alone JavaScript file from specified package. Write output to <target> if given any.'
          , '  install    [modules]                    Package specified NodeJS core modules and locate them in node_modules/ directory.'
          , '  server     <manifest> <port> <host>     Publish generated JavaScript file on web. Uses 127.0.0.1:1338 by default.'
          , ''
          , 'options:'
          , '  --debug                                 Disable module caching. Pass ENV variables to the build.'
          , ''
          , '  --tie <package name>=<global object>    Create package links to specified global variables. e.g; --tie dom=window.document,jQuery=jQuery'
          , '  --exclude <package name>                Do not contain specified dependencies. e.g: --exclude underscore,request '
          , '  --noprocess                             Do not include process implementation.'
          , '  --sandbox-console                       Provide the build an encapsulated, embed console implementation.'
          , '  --plain                                 Builds the package within a minimalistic template for the packages with single module and no dependencies.'
          , ''
          , '  --quiet                                 Make console output less verbose.'
          , '  --verbose                               Tell what\'s going on by being verbose.'
          , '  --version                               Show version and exit.'
          , '  --help                                  Show help.'
          , ''].join('\n');

function build(){
  var manifest       = argv._[1] || 'package.json',
      target         = argv._[2],
      tie            = argv.tie,
      exclude        = argv.exclude,
      plain          = argv.plain,
      sandboxConsole = argv['sandbox-console'];

  if(tie){
    tie = tie.split(',')
      .filter(function(el){
        return el && el.indexOf('=') > -1;
      })
      .map(function(el){
        el = el.split('=');
        return { 'module': el[0], 'to': el[1] };
      });
  }

  exclude && ( exclude = exclude.split(',').filter(function(el){ return el && el.length; }) );

  var options = {
    'noprocess': argv.noprocess,
    'tie': tie,
    'debug': argv.debug,
    'exclude': exclude,
    'sandboxConsole': sandboxConsole,
    'plain': plain
  };

  one.build(manifest, options, function(error, pkg){
    if(error) throw error;
    if(target){
      one.save(target, pkg, function(error){
        if(error) throw error;
        process.exit(0);
      });
    } else {
      puts(pkg);
    }
  });
}

function help(){
  puts(HELP);
  process.exit(0);
}

function server(){
  var manifest = argv._[1] || 'package.json',
      host     = argv._[3] || '127.0.0.1',
      port     = argv._[2] || 1338,
      debug    = argv.debug;

  one.publish({ 'manifestPath':manifest, 'host':host, 'port':port, 'debug': debug });
}

function setupNodeDeps(){
  var modules = argv._.slice(1);
  modules.push(function(error){
    if(error) throw error;
  });

  one.setupNodeModules.apply(undefined, modules);
}

function verbosity(){
  one.verbosity('INFO');
  argv.quiet && one.quiet(true);
  argv.verbose && one.verbose(true);
}

function version(){
  puts('OneJS v' + REV);
  process.exit(0);
}

var action = argv._[0];

verbosity();

switch(action){
  case 'build': build(); break;
  case 'server': server(); break;
  case 'install': setupNodeDeps(); break;
  default:
    if(argv.version){
      version();
    } else {
      help();
    }
}
