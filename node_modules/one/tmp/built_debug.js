/*global require:false, Buffer:false, process:false, module:false */
var exampleProject = (function(unused, undefined){
  var DEBUG         = true,
      pkgdefs       = {},
      pkgmap        = {},
      global        = {},
      lib,
      nativeRequire = typeof require != 'undefined' && require,
      nativeBuffer  = typeof Buffer != 'undefined' && Buffer,
      ties, locals;
  lib = (function(exports){
  exports.path = (function(exports){
    // Copyright Joyent, Inc. and other Node contributors.
// Minimized fork of NodeJS' path module, based on its an early version.
exports.join = function () {
  return exports.normalize(Array.prototype.join.call(arguments, "/"));
};
exports.normalizeArray = function (parts, keepBlanks) {
  var directories = [], prev;
  for (var i = 0, l = parts.length - 1; i <= l; i++) {
    var directory = parts[i];
    // if it's blank, but it's not the first thing, and not the last thing, skip it.
    if (directory === "" && i !== 0 && i !== l && !keepBlanks) continue;
    // if it's a dot, and there was some previous dir already, then skip it.
    if (directory === "." && prev !== undefined) continue;
    if (
      directory === ".." &&
      directories.length &&
      prev !== ".." &&
      prev !== "." &&
      prev !== undefined &&
      (prev !== "" || keepBlanks)
    ) {
      directories.pop();
      prev = directories.slice(-1)[0];
    } else {
      if (prev === ".") directories.pop();
      directories.push(directory);
      prev = directory;
    }
  }
  return directories;
};
exports.normalize = function (path, keepBlanks) {
  return exports.normalizeArray(path.split("/"), keepBlanks).join("/");
};
exports.dirname = function (path) {
  return path && path.substr(0, path.lastIndexOf("/")) || ".";
};
    return exports;
  }({}));
    global.process = exports.process = (function(exports){
    /**
 * This is module's purpose is to partly emulate NodeJS' process object on web browsers. It's not an alternative
 * and/or implementation of the "process" object.
 */
function Buffer(size){
  if (!(this instanceof Buffer)) return new Buffer(size);
  this.content = '';
};
Buffer.prototype.isBuffer = function isBuffer(){
  return true;
};
Buffer.prototype.write = function write(string){
  this.content += string;
};
global.Buffer = exports.Buffer = Buffer;
function Stream(writable, readable){
  if (!(this instanceof Stream)) return new Stream(writable, readable);
  Buffer.call(this);
  this.emulation = true;
  this.readable = readable;
  this.writable = writable;
  this.type = 'file';
};
Stream.prototype = Buffer(0,0);
exports.Stream = Stream;
function notImplemented(){
  throw new Error('Not Implemented.');
}
exports.binding = (function(){
  var table = {
    'buffer':{ 'Buffer':Buffer, 'SlowBuffer':Buffer }
  };
  return function binding(bname){
    if(!table.hasOwnProperty(bname)){
      throw new Error('No such module.');
    }
    return table[bname];
  };
})();
exports.argv = ['onejs'];
exports.env = {"GREP_COLOR":"1;32","rvm_dump_environment_flag":"0","MANPATH":"/Users/azerkoculu/nvm/v0.8.2/share/man:","TERM_PROGRAM":"iTerm.app","rvm_bin_path":"/Users/azerkoculu/.rvm/bin","rvm_clang_flag":"0","rvm_quiet_flag":"","GEM_HOME":"/Users/azerkoculu/.rvm/gems/ruby-1.9.3-p194","TERM":"xterm-256color","rvm_gemstone_url":"","SHELL":"/bin/zsh","MAKEFLAGS":"","TMPDIR":"/var/folders/hw/8lv4_0cn0j75rbctx3yyrkbc0000gn/T/","IRBRC":"/Users/azerkoculu/.rvm/rubies/ruby-1.9.3-p194/.irbrc","rvm_docs_type":"","Apple_PubSub_Socket_Render":"/tmp/launch-69CCQY/Render","NVM_PATH":"/Users/azerkoculu/nvm/v0.8.2/lib/node","MY_RUBY_HOME":"/Users/azerkoculu/.rvm/rubies/ruby-1.9.3-p194","LC_ALL":"en_US.UTF-8","rvm_verbose_flag":"0","NVM_DIR":"/Users/azerkoculu/nvm","USER":"azerkoculu","rvm_gemstone_package_file":"","COMMAND_MODE":"unix2003","__array_start":"1","rvm_install_on_use_flag":"","rvm_remove_flag":"","rvm_path":"/Users/azerkoculu/.rvm","NEO4J_HOME":"/Users/azerkoculu/opt/neo4j","SSH_AUTH_SOCK":"/tmp/launch-p8Eovv/Listeners","rvm_debug_flag":"0","__CF_USER_TEXT_ENCODING":"0x1F5:0:0","Apple_Ubiquity_Message":"/tmp/launch-wH3ep2/Apple_Ubiquity_Message","MAKELEVEL":"1","CLOJURE_EXT":"/Users/azerkoculu/.clojure","rvm_proxy":"","rvm_ruby_file":"","PAGER":"less","escape_flag":"1","MFLAGS":"","LSCOLORS":"Gxfxcxdxbxegedabagacad","rvm_prefix":"/Users/azerkoculu","rvm_silent_flag":"","rvm_trace_flag":"","PATH":"/opt/local/bin:/opt/local/sbin:/Users/azerkoculu/.zendesk/bin:/Users/azerkoculu/.zendesk/sbin:/Users/azerkoculu/nvm/v0.8.2/bin:/Users/azerkoculu/.rvm/gems/ruby-1.9.3-p194/bin:/Users/azerkoculu/.rvm/gems/ruby-1.9.3-p194@global/bin:/Users/azerkoculu/.rvm/rubies/ruby-1.9.3-p194/bin:/Users/azerkoculu/.rvm/bin:/Users/azerkoculu/.zendesk/bin:/Users/azerkoculu/.zendesk/sbin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/usr/X11/bin:/usr/local/git/bin:/Users/azerkoculu/.node_modules/.bin:/Users/azerkoculu/opt/leiningen:/Users/azerkoculu/opt/neo4j/bin:/var/lib/gems/1.8/bin/:/Users/azerkoculu/opt/clojure-contrib/launchers/bash:/Users/azerkoculu/opt/leiningen:/Users/azerkoculu/opt/android/tools:/Users/azerkoculu/opt/android/platform-tools:/Users/azerkoculu/.local/bin:/Users/azerkoculu/dev/z/bin","rvm_ruby_make":"","LC_MESSAGES":"C","rvm_gemdir_flag":"","_":"./bin/onejs","PWD":"/Users/azerkoculu/onejs","JAVA_HOME":"/opt/java","LANG":"en_US.UTF-8","rvm_patch_original_pwd":"","rvm_sdk":"","ITERM_PROFILE":"tmux","TZ":"US/Pacific","_second":"2","rvm_ruby_user_tag":"","rvm_ruby_sha":"","rvm_ree_options":"","rvm_version":"1.9.2","rvm_script_name":"","SHLVL":"2","HOME":"/Users/azerkoculu","rvm_pretty_print_flag":"","rvm_ruby_mode":"","GREP_OPTIONS":"--color=auto","rvm_archflags":"","ITERM_SESSION_ID":"w0t8p0","LESS":"-R","LOGNAME":"azerkoculu","_first":"1","rvm_alias_expanded":"","GEM_PATH":"/Users/azerkoculu/.rvm/gems/ruby-1.9.3-p194:/Users/azerkoculu/.rvm/gems/ruby-1.9.3-p194@global","rvm_wrapper_name":"","LC_CTYPE":"en_US.UTF-8","NVM_BIN":"/Users/azerkoculu/nvm/v0.8.2/bin","rvm_nightly_flag":"","BROWSER":"delicious-surf","rvm_reload_flag":"0","rvm_ruby_make_install":"","DISPLAY":"/tmp/launch-ao3moD/org.x:0","rvm_niceness":"","rvm_ruby_patch":"","SECURITYSESSIONID":"186a4","RUBY_VERSION":"ruby-1.9.3-p194"};
exports.nextTick = function nextTick(fn){
  return setTimeout(fn, 0);
};
exports.stderr = Stream(true, false);
exports.stdin = Stream(false, true);
exports.stdout = Stream(true, false);
exports.version = '1.7.11';
exports.versions = {"one":"1.7.11"};
/**
 * void definitions
 */
exports.pid =
exports.uptime = 0;
exports.arch =
exports.execPath =
exports.installPrefix =
exports.platform =
exports.title = '';
exports.chdir =
exports.cwd =
exports.exit =
exports.getgid =
exports.setgid =
exports.getuid =
exports.setuid =
exports.memoryUsage =
exports.on =
exports.umask = notImplemented;
    return exports;
  }({}));
  return exports;
}({}));
  function findPkg(uri){
    return pkgmap[uri];
  }
  function findModule(workingModule, uri){
    var module,
        moduleId = lib.path.join(lib.path.dirname(workingModule.id), uri).replace(/\.js$/, ''),
        moduleIndexId = lib.path.join(moduleId, 'index'),
        pkg = workingModule.pkg;
    var i = pkg.modules.length,
        id;
    while(i-->0){
      id = pkg.modules[i].id;
      if(id==moduleId || id == moduleIndexId){
        module = pkg.modules[i];
        break;
      }
    }
    return module;
  }
  function genRequire(callingModule){
    return function require(uri){
      var module,
          pkg;
      if(/^\./.test(uri)){
        module = findModule(callingModule, uri);
      } else if ( ties && ties.hasOwnProperty( uri ) ) {
        return ties[ uri ];
      } else {
        pkg = findPkg(uri);
        if(!pkg && nativeRequire){
          try {
            pkg = nativeRequire(uri);
          } catch (nativeRequireError) {}
          if(pkg) return pkg;
        }
        if(!pkg){
          throw new Error('Cannot find module "'+uri+'" @[module: '+callingModule.id+' package: '+callingModule.pkg.name+']');
        }
        module = pkg.index;
      }
      if(!module){
        throw new Error('Cannot find module "'+uri+'" @[module: '+callingModule.id+' package: '+callingModule.pkg.name+']');
      }
      module.parent = callingModule;
      return module.call();
    };
  }
  function module(parentId, wrapper){
    var parent = pkgdefs[parentId],
        mod = wrapper(parent),
        cached = false;
    mod.exports = {};
    mod.require = genRequire(mod);
    mod.call = function(){
      global.require = mod.require;
      mod.wrapper(mod, mod.exports, global, nativeBuffer || global.Buffer, global.process,global.require);
      return mod.exports;
    };
    if(parent.mainModuleId == mod.id){
      parent.index = mod;
      parent.parents.length === 0 && ( locals.main = mod.call );
    }
    parent.modules.push(mod);
  }
  function pkg(/* [ parentId ...], wrapper */){
    var wrapper = arguments[ arguments.length - 1 ],
        parents = Array.prototype.slice.call(arguments, 0, arguments.length - 1),
        ctx = wrapper(parents);
    if(pkgdefs.hasOwnProperty(ctx.id)){
      throw new Error('Package#'+ctx.id+' "' + ctx.name + '" has duplication of itself.');
    }
    pkgdefs[ctx.id] = ctx;
    pkgmap[ctx.name] = ctx;
    arguments.length == 1 && ( pkgmap.main = ctx );
  }
  function mainRequire(uri){
    return pkgmap.main.index.require(uri);
  }
  function stderr(){
    return lib.process.stderr.content;
  }
  function stdin(){
    return lib.process.stdin.content;
  }
  function stdout(){
    return lib.process.stdout.content;
  }
  return (locals = {
    'lib'        : lib,
    'findPkg'    : findPkg,
    'findModule' : findModule,
    'name'       : 'exampleProject',
    'module'     : module,
    'pkg'        : pkg,
    'packages'   : pkgmap,
    'stderr'     : stderr,
    'stdin'      : stdin,
    'stdout'     : stdout,
    'require'    : mainRequire
   ,'debug'      : true
});
}(this));
exampleProject.pkg(1, function(parents){
  return {
    'id':9,
    'name':'assert',
    'main':undefined,
    'mainModuleId':'assert',
    'modules':[],
    'parents':parents
  };
});
exampleProject.module(9, function(/* parent */){
  return {
    'id': 'assert',
    'pkg': arguments[0],
    'wrapper': function(module, exports, global, Buffer,process,require, undefined){
      exports.assert = true;
    }
  };
});
exampleProject.pkg(1, function(parents){
  return {
    'id':3,
    'name':'dependency',
    'main':undefined,
    'mainModuleId':'f',
    'modules':[],
    'parents':parents
  };
});
exampleProject.module(3, function(/* parent */){
  return {
    'id': 'f',
    'pkg': arguments[0],
    'wrapper': function(module, exports, global, Buffer,process,require, undefined){
      require('subdependency');
exports.parent = module.parent;
exports.f = true;
    }
  };
});
exampleProject.module(3, function(/* parent */){
  return {
    'id': 'g',
    'pkg': arguments[0],
    'wrapper': function(module, exports, global, Buffer,process,require, undefined){
      exports.g = true;
    }
  };
});
exampleProject.pkg(function(parents){
  return {
    'id':1,
    'name':'example-project',
    'main':undefined,
    'mainModuleId':'a',
    'modules':[],
    'parents':parents
  };
});
exampleProject.module(1, function(/* parent */){
  return {
    'id': 'a',
    'pkg': arguments[0],
    'wrapper': function(module, exports, global, Buffer,process,require, undefined){
      console.log('Elle creuse encore, cette vieville amie au regard fatigué.');
var mustacheSyntax = "{{ foobar }}";
module.exports = {
  'a':true,
  'dependency': require('dependency'),
  'now': +(new Date),
  'global':global,
  'process':process,
  'Buffer':Buffer,
  'console': console,
  'mustacheSyntax': mustacheSyntax
};
    }
  };
});
exampleProject.module(1, function(/* parent */){
  return {
    'id': 'b',
    'pkg': arguments[0],
    'wrapper': function(module, exports, global, Buffer,process,require, undefined){
      exports.b = true;
    }
  };
});
exampleProject.module(1, function(/* parent */){
  return {
    'id': 'web',
    'pkg': arguments[0],
    'wrapper': function(module, exports, global, Buffer,process,require, undefined){
      console.log('this module will be working for only web browsers');
    }
  };
});
exampleProject.pkg(1, 4, function(parents){
  return {
    'id':2,
    'name':'exclude',
    'main':undefined,
    'mainModuleId':'index',
    'modules':[],
    'parents':parents
  };
});
exampleProject.module(2, function(/* parent */){
  return {
    'id': 'index',
    'pkg': arguments[0],
    'wrapper': function(module, exports, global, Buffer,process,require, undefined){
      exports.exclude = true;
    }
  };
});
exampleProject.pkg(3, function(parents){
  return {
    'id':5,
    'name':'fruits',
    'main':undefined,
    'mainModuleId':'index',
    'modules':[],
    'parents':parents
  };
});
exampleProject.module(5, function(/* parent */){
  return {
    'id': 'index',
    'pkg': arguments[0],
    'wrapper': function(module, exports, global, Buffer,process,require, undefined){
      module.exports = require('./lib/fruits');
    }
  };
});
exampleProject.module(5, function(/* parent */){
  return {
    'id': 'lib/fruits',
    'pkg': arguments[0],
    'wrapper': function(module, exports, global, Buffer,process,require, undefined){
      module.exports = ['apple', 'orange'];
    }
  };
});
exampleProject.pkg(3, 1, function(parents){
  return {
    'id':6,
    'name':'sibling',
    'main':undefined,
    'mainModuleId':'n',
    'modules':[],
    'parents':parents
  };
});
exampleProject.module(6, function(/* parent */){
  return {
    'id': 'n',
    'pkg': arguments[0],
    'wrapper': function(module, exports, global, Buffer,process,require, undefined){
      
exports.n = true;
exports.p = require('./p');
exports.s = require('./s/t');
    }
  };
});
exampleProject.module(6, function(/* parent */){
  return {
    'id': 'p/index',
    'pkg': arguments[0],
    'wrapper': function(module, exports, global, Buffer,process,require, undefined){
      exports.p = true;
exports.index = true;
    }
  };
});
exampleProject.module(6, function(/* parent */){
  return {
    'id': 'p/r',
    'pkg': arguments[0],
    'wrapper': function(module, exports, global, Buffer,process,require, undefined){
      require('../s/t');
exports.r = true;
    }
  };
});
exampleProject.module(6, function(/* parent */){
  return {
    'id': 's/t',
    'pkg': arguments[0],
    'wrapper': function(module, exports, global, Buffer,process,require, undefined){
      exports.t = true;
    }
  };
});
exampleProject.pkg(3, function(parents){
  return {
    'id':4,
    'name':'subdependency',
    'main':undefined,
    'mainModuleId':'i',
    'modules':[],
    'parents':parents
  };
});
exampleProject.module(4, function(/* parent */){
  return {
    'id': 'i',
    'pkg': arguments[0],
    'wrapper': function(module, exports, global, Buffer,process,require, undefined){
      require('sibling');
exports.i = true;
    }
  };
});
exampleProject.pkg(3, function(parents){
  return {
    'id':7,
    'name':'vegetables',
    'main':undefined,
    'mainModuleId':'lib/index',
    'modules':[],
    'parents':parents
  };
});
exampleProject.module(7, function(/* parent */){
  return {
    'id': 'lib/index',
    'pkg': arguments[0],
    'wrapper': function(module, exports, global, Buffer,process,require, undefined){
      module.exports = ['tomato', 'potato'];
    }
  };
});
exampleProject.pkg(3, function(parents){
  return {
    'id':8,
    'name':'vehicles',
    'main':undefined,
    'mainModuleId':'index',
    'modules':[],
    'parents':parents
  };
});
exampleProject.module(8, function(/* parent */){
  return {
    'id': 'index',
    'pkg': arguments[0],
    'wrapper': function(module, exports, global, Buffer,process,require, undefined){
      module.exports = require('./lib/vehicles');
    }
  };
});
exampleProject.module(8, function(/* parent */){
  return {
    'id': 'lib/vehicles',
    'pkg': arguments[0],
    'wrapper': function(module, exports, global, Buffer,process,require, undefined){
      module.exports = ['car', 'boat', 'truck'];
    }
  };
});
if(typeof module != 'undefined' && module.exports ){
  module.exports = exampleProject;
  if( !module.parent ){
    exampleProject.main();
  }
}