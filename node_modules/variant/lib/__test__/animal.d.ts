import { TypeNames, VariantOf } from '..';
import { VariantCreator } from '../variant';
export declare const Animal: import("../variant").VariantModuleFromList<VariantCreator<"dog", (input: {
    name: string;
    favoriteBall?: string | undefined;
}) => {
    name: string;
    favoriteBall?: string | undefined;
}, "type"> | VariantCreator<"cat", (input: {
    name: string;
    furnitureDamaged: number;
}) => {
    name: string;
    furnitureDamaged: number;
}, "type"> | VariantCreator<"snake", (name: string, patternName?: string | undefined) => {
    name: string;
    pattern: string;
}, "type">>;
export declare type Animal<T extends TypeNames<typeof Animal> = undefined> = VariantOf<typeof Animal, T>;
export declare const TaggedAnimal: import("../variant").VariantModuleFromList<VariantCreator<"dog", (input: {
    name: string;
    favoriteBall?: string | undefined;
}) => {
    name: string;
    favoriteBall?: string | undefined;
}, "__typename"> | VariantCreator<"cat", (input: {
    name: string;
    furnitureDamaged: number;
}) => {
    name: string;
    furnitureDamaged: number;
}, "__typename"> | VariantCreator<"snake", (name: string, patternName?: string | undefined) => {
    name: string;
    pattern: string;
}, "__typename">>;
export declare type TaggedAnimal<T extends TypeNames<typeof TaggedAnimal, '__typename'> = undefined> = VariantOf<typeof TaggedAnimal, T, '__typename'>;
export declare const Animal2: {
    dog: VariantCreator<"dog", (input: {
        name: string;
        favoriteBall?: string | undefined;
    }) => {
        name: string;
        favoriteBall?: string | undefined;
    }, "type">;
    cat: VariantCreator<"cat", (input: {
        name: string;
        furnitureDamaged: number;
    }) => {
        name: string;
        furnitureDamaged: number;
    }, "type">;
    snake: VariantCreator<"snake", (name: string, pattern?: any) => {
        name: string;
        pattern: any;
    }, "type">;
    bird: VariantCreator<"bird", () => {}, "type">;
};
export declare type Animal2<T extends TypeNames<typeof Animal2> = undefined> = VariantOf<typeof Animal2, T>;
export declare const cerberus: {
    type: "dog";
    name: string;
    favoriteBall?: string | undefined;
};
export declare const cerberus2: {
    type: "dog";
    name: string;
    favoriteBall?: string | undefined;
};
export declare const AmphibiousAnimal: import("../variant").VariantModuleFromList<VariantCreator<"frog", (input: {
    color: string;
}) => {
    color: string;
}, "type">>;
export declare type AmphibiousAnimal<T extends TypeNames<typeof AmphibiousAnimal> = undefined> = VariantOf<typeof AmphibiousAnimal, T>;
export declare const WaterAnimal: import("../variant").VariantModuleFromList<VariantCreator<"goldfish", (input: {
    memoryInSeconds: number;
}) => {
    memoryInSeconds: number;
}, "type">>;
export declare type WaterAnimal<T extends TypeNames<typeof WaterAnimal> = undefined> = VariantOf<typeof WaterAnimal, T>;
//# sourceMappingURL=animal.d.ts.map