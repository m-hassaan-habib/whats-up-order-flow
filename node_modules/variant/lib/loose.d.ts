/**
 * Loose things until I find a better place to put them in the re-org.
 */
import { OutVariant, Property } from './variant';
export declare const pass: <T>(x: T) => T;
/**
 * Used in conjunction with variantModule to have empty tags.
 */
export declare const nil: () => void;
declare type FieldsFromVariant<T, K extends string> = Omit<Extract<T, {
    type: K;
}>, 'type'>;
export declare type ExactVC<T extends {
    type: string;
}> = {
    [P in T['type']]: (input: FieldsFromVariant<T, P>) => FieldsFromVariant<T, P>;
};
export declare function typedVariant<T extends {
    type: string;
}>(def: ExactVC<T>): OutVariant<ExactVC<T>>;
/**
 * strip the type field from some object type.
 */
export declare type VariantWithoutType<T, K extends string = 'type'> = Omit<T, K>;
export declare type SpecificVariantFields<T, TType extends string, K extends string = 'type'> = VariantWithoutType<Extract<T, Property<K, TType>>>;
export declare type ExactDefinition<T extends Property<K, string>, K extends string = 'type'> = {
    [P in T[K]]: (input: SpecificVariantFields<T, P, K>) => SpecificVariantFields<T, P, K>;
};
export declare function typed<T extends Property<'type', string>>(def: ExactDefinition<T>): ExactDefinition<T, "type">;
export declare function typedWithKey<T extends Property<K, string>, K extends string = 'type'>(def: ExactDefinition<T, K>): ExactDefinition<T, K>;
export {};
//# sourceMappingURL=loose.d.ts.map