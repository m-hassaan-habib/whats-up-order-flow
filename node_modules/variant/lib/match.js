"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.just = exports.unpack = exports.noop = exports.matchLiteral = exports.match = exports.DEFAULT_KEY = void 0;
/**
 * The key used to indicate the default handler.
 */
exports.DEFAULT_KEY = 'default';
;
/**
 * Actual impl
 */
function match(obj, handler, _elseOrKey, key) {
    var _a;
    const typeKey = typeof _elseOrKey === 'string' ? _elseOrKey : key;
    const typeString = obj[typeKey !== null && typeKey !== void 0 ? typeKey : 'type'];
    if (typeString in handler) {
        return (_a = handler[typeString]) === null || _a === void 0 ? void 0 : _a.call(handler, obj);
    }
    else {
        if (_elseOrKey != undefined && typeof _elseOrKey === 'function') {
            return _elseOrKey(obj);
        }
        else {
            if ('default' in handler) {
                return handler.default(obj);
            }
            return undefined;
        }
    }
}
exports.match = match;
/**
 * Match a literal against some of its possible options and do some processing based
 * on the type of literal received. Works well with strEnum
 * @param literal
 * @param handler
 */
function matchLiteral(literal, handler) {
    var _a;
    return (_a = handler[literal]) === null || _a === void 0 ? void 0 : _a.call(handler, literal);
}
exports.matchLiteral = matchLiteral;
const noop = (..._) => { };
exports.noop = noop;
/**
 * Extract the payload element from the object and return it.
 *
 * Unstable API.
 *
 * Shorthand for
 *
 * ```ts
 * match(object, {
 *     ...
 *     case: unpack,
 *     ...
 * })
 * ```
 * @param x
 */
const unpack = (x) => x.payload;
exports.unpack = unpack;
/**
 * Ignore the matched object and return a specific value.
 *
 * Unstable API.
 *
 * ```ts
 * match(object, {
 *     ...
 *     case: just(true),
 *     ...
 * })
 * ```
 * @param x
 */
const just = (x) => () => x;
exports.just = just;
//# sourceMappingURL=match.js.map